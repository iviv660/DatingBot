services:
  user_service:
    build:
      context: .
      dockerfile: user/Dockerfile
    env_file:
      - .env
    ports:
      - "50051:50051"
    depends_on:
      user_postgres:
        condition: service_healthy
      user_migrations:
        condition: service_completed_successfully
      user_redis:
        condition: service_started
      user_minio:
        condition: service_healthy
    restart: unless-stopped

  user_minio:
    image: minio/minio:latest
    container_name: user_minio
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${USER_MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${USER_MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
    volumes:
      - user_minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  user_postgres:
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${USER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USER_POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_POSTGRES_USER} -d ${USER_POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  user_redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes", "--port", "6379"]
    ports:
      - "6379:6379"
    volumes:
      - user_redis_data:/data
    restart: unless-stopped

  user_migrations:
    image: migrate/migrate:4
    depends_on:
      user_postgres:
        condition: service_healthy
    volumes:
      - ./user/migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "postgres://${USER_POSTGRES_USER}:${USER_POSTGRES_PASSWORD}@user_postgres:5432/${USER_POSTGRES_DB}?sslmode=disable",
      "up"
    ]
    restart: "on-failure"

  match_service:
    build:
      context: .
      dockerfile: match/Dockerfile
    env_file:
      - .env
    ports:
      - "50052:50052"
    depends_on:
      match_postgres:
        condition: service_healthy
      match_migrations:
        condition: service_completed_successfully
      user_service:
        condition: service_started
    restart: unless-stopped

  match_postgres:
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${MATCH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MATCH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${MATCH_POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - match_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MATCH_POSTGRES_USER} -d ${MATCH_POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  match_migrations:
    image: migrate/migrate:4
    depends_on:
      match_postgres:
        condition: service_healthy
    volumes:
      - ./match/migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "postgres://${MATCH_POSTGRES_USER}:${MATCH_POSTGRES_PASSWORD}@match_postgres:5432/${MATCH_POSTGRES_DB}?sslmode=disable",
      "up"
    ]
    restart: "on-failure"

  notifier_service:
    build:
      context: .
      dockerfile: notifier/Dockerfile
    env_file:
      - .env
    depends_on:
      match_postgres:
        condition: service_healthy
      match_migrations:
        condition: service_completed_successfully
      user_service:
        condition: service_started
    restart: unless-stopped

volumes:
  user_postgres_data:
  match_postgres_data:
  user_redis_data:
  user_minio_data:
